{#
/**
* @file
* Default theme implementation to display a paragraph.
*
* Available variables:
* - paragraph: Full paragraph entity.
*   Only method names starting with "get", "has", or "is" and a few common
*   methods such as "id", "label", and "bundle" are available. For example:
*   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
*   - paragraph.id(): The paragraph ID.
*   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
*   - paragraph.getOwnerId(): The user ID of the paragraph author.
*   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
*   and methods for the paragraph object.
* - content: All paragraph items. Use {{ content }} to print them all,
*   or print a subset such as {{ content.field_example }}. Use
*   {{ content|without('field_example') }} to temporarily suppress the printing
*   of a given child element.
* - attributes: HTML attributes for the containing element.
*   The attributes.class element may contain one or more of the following
*   classes:
*   - paragraphs: The current template type (also known as a "theming hook").
*   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
*     "Image" it would result in "paragraphs--type--image". Note that the machine
*     name will often be in a short form of the human readable label.
*   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
*     preview would result in: "paragraphs--view-mode--preview", and
*     default: "paragraphs--view-mode--default".
* - view_mode: View mode; for example, "preview" or "full".
* - logged_in: Flag for authenticated user status. Will be true when the
*   current user is a logged-in member.
* - is_admin: Flag for admin user status. Will be true when the current user
*   is an administrator.
*
* @see template_preprocess_paragraph()
*
* @ingroup themeable
#}

{{ attach_library('w3css_paragraphs/w3css-paragraphs') }}
{{ attach_library('w3css_paragraphs_accordion/w3css-paragraphs-accordion') }}

{% set classes = [
  'w3-row',
  'p-container',
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished',
  'paragraph--id--' ~ paragraph.id.value
] %}

{# Merge width and custom w3.css classes to all classes. #}
{% if content.w3css_display_width|render %}
  {% set container_w_input = content.w3css_display_width|render|striptags|trim %}
  {% set container_width = 'p-container-width-' ~ container_w_input %}
  {% set classes = classes|merge([container_width]) %}
{% endif %}

{% if content.w3css_display_bg_color|render %}
  {% set w3css_bg_color = content.w3css_display_bg_color|render|striptags|trim %}
  {% set w3css_bg_color =  w3css_bg_color|slice(3) %}
  {% set w3css_bg_color =  w3css_bg_color|replace({'-':','}) %}
  {% if content.w3css_display_opacity|render %}
    {% set w3css_bg_opacity = content.w3css_display_opacity|render|striptags|trim %}
    {% set w3css_bg_opacity = '0.' ~ w3css_bg_opacity %}
  {% else %}
    {% set w3css_bg_opacity = '100' %}
  {% endif %}
  {% set w3css_bg_color = w3css_bg_color ~ ',' ~  w3css_bg_opacity %}
{% endif %}

{% if content.w3css_display_hover_bg|render %}
  {% set w3css_hover_bg = content.w3css_display_hover_bg|render|striptags|trim %}
  {% set classes = classes|merge([w3css_hover_bg]) %}
{% endif %}

{% if content.w3css_display_text_color|render %}
  {% set w3css_txt_color = content.w3css_display_text_color|render|striptags|trim %}
  {% set classes = classes|merge([w3css_txt_color]) %}
{% endif %}

{% if content.w3css_display_hover_text|render %}
  {% set w3css_hover_txt = content.w3css_display_hover_text|render|striptags|trim %}
  {% set classes = classes|merge([w3css_hover_txt]) %}
{% endif %}

{% if content.w3css_display_border|render %}
  {% set w3css_border = content.w3css_display_border|render|striptags|trim %}
  {% set classes = classes|merge([w3css_border]) %}
{% endif %}

{% if content.w3css_display_round|render %}
  {% set w3css_round = content.w3css_display_round|render|striptags|trim %}
  {% set classes = classes|merge([w3css_round]) %}
{% endif %}

{% if content.w3css_display_border_color|render %}
  {% set w3css_border_color = content.w3css_display_border_color|render|striptags|trim %}
  {% set classes = classes|merge([w3css_border_color]) %}
{% endif %}

{% if content.w3css_display_card|render %}
  {% set w3css_card = content.w3css_display_card|render|striptags|trim %}
  {% set classes = classes|merge([w3css_card]) %}
{% endif %}

{% if content.w3css_display_hover_border|render %}
  {% set w3css_hover_border = content.w3css_display_hover_border|render|striptags|trim %}
  {% set classes = classes|merge([w3css_hover_border]) %}
{% endif %}

{% if content.w3css_display_classes|render %}
  {% set w3css_classes = content.w3css_display_classes|render|striptags|trim %}
  {% set classes = classes|merge([w3css_classes]) %}
{% endif %}

{# margin and padding only for child div #}
{% if content.w3css_display_margin|render %}
  {% set w3css_margin = content.w3css_display_margin|render|striptags|trim %}
  {% set w3css_margin_padding = w3css_margin %}
{% endif %}

{% if content.w3css_display_padding|render %}
  {% set w3css_padding = content.w3css_display_padding|render|striptags|trim %}
  {% set w3css_margin_padding = w3css_margin_padding ~ ' ' ~ w3css_padding %}
{% endif %}

{# Display or hide expand all #}
{% if content.w3css_display_show_expand|render %}
  {% set w3css_expand_all = content.w3css_display_show_expand|render|striptags|trim %}
{% endif %}

{% if content.w3css_display_indicator|render %}
  {% set w3css_show_indicator = content.w3css_display_indicator|render|striptags|trim %}
{% endif %}

{% if content.w3css_display_open_first|render %}
  {% set w3css_open_first = content.w3css_display_open_first|render|striptags|trim %}
{% endif %}

{% if content.w3css_display_animated_tab|render %}
  {% set w3css_animated_tab = content.w3css_display_animated_tab|render|striptags|trim %}
{% endif %}

{% if content.w3css_display_active_item|render %}
  {% set w3css_display_active = content.w3css_display_active_item|render|striptags|trim %}
  {% set classes = classes|merge([w3css_display_active]) %}
{% endif %}

{# Sets Unique ID for Accordion from Paragraph ID. #}
{% set paragraph_id = 'w3-acc-' ~ paragraph.id.value %}
<div {% if w3css_bg_color %}style="background-color: rgba( {{ w3css_bg_color }} )" {% endif %} {{ attributes.addClass(classes) }} role="tablist" aria-multiselectable="true">
  <div class="w3-row p-container-inner">

    {% if w3css_margin_padding %}
    <div class="w3-row {{ w3css_margin_padding }}">
    {% endif %}

      <div id="{{ paragraph_id }}" class="w3-row">

        {% if content.w3css_content_title|render %}
        <h3 class="content-title">{{ content.w3css_content_title }}</h3>
        {% endif %}

        {% if w3css_expand_all == "On" %}
        <div class="w3-row ex-button">
          <button class="w3-button w3-right plus">&#x0229E</button>
          <button class="w3-button w3-right minus">&#x0229F</button>
        </div>
        {% endif %}

        {% for key, item in content.w3css_content_accordion_section if key|first != '#' %}
        <div id="wrapper-accs-btn-pane-{{ paragraph.id.value }}-{{ key + 1 }}" class="w3-row wrapper-accs-btn-pane {% if loop.first %} {{ w3css_open_first == 'On' ? 'w3-is-active' : 'w3-not-active' }} {% else %} w3-not-active{% endif %}">
          <div class="w3-row w3-accs-button" role="tablist">
            {# Loops through the accordion sections to print the tab section titles. #}
            <button id="{{ paragraph_id }}-{{ key + 1 }}" class="w3-button w3-bar w3-acc-button" aria-controls="{{ item['#paragraph'].w3css_content_accordion_title.value }}" role="tab" data-toggle="tab">
              {{ item['#paragraph'].w3css_content_accordion_title.value }}
              {% if w3css_show_indicator == "On" %}
              <div class="plus-minus w3-right">
                <span class="minus">&#x02212</span>
                <span class="plus">&#x0002B</span>
              </div>
              {% endif %}
            </button>
          </div>

          <div class="w3-row w3-accs-pane">
            {# Loop through all of the accordion section bodies. #}
            <div role="tabpanel" class="w3-acc-pane {{ w3css_animated_tab == '' ? '' : ' ' ~ w3css_animated_tab }}"
                 id="{{ paragraph_id }}-{{ key + 1 }}-pane">
              {% for body_key, body_item in item['#paragraph'].w3css_content_accordion_body %}
                {# Use the same render array as item and set the '#paragraph'. #}
                {% set section_body = item %}
                {% set lang = section_body['#paragraph'].langcode[0].value %}
                {# Check if a translation exists #}
                {% if section_body['#paragraph'].w3css_content_accordion_body[body_key].entity.hasTranslation(lang) %}
                  {# Load the entity for the current translation #}
                  {% set section_translation = section_body['#paragraph'].w3css_content_accordion_body[body_key].entity.getTranslation(lang) %}
                {% else %}
                  {# Load the source entity #}
                  {% set section_translation = section_body['#paragraph'].w3css_content_accordion_body[body_key].entity %}
                {% endif %}
                {% set section_body = section_body|merge({'#paragraph': section_translation}) %}
                {# Remove the cache keys so it doesn't repeat the first value. #}
                {% set section_body = section_body|merge({'#cache': {}}) %}
                {# Print the compiled section body. #}
                {{ section_body }}
              {% endfor %}
            </div>
          </div>

          </div>{# End of wrapper-accs-btn-pane #}
        {% endfor %}

      </div> {# End of paragraph ID #}

    {% if w3css_margin_padding %}
    </div>
    {% endif %}

  </div>
</div> {# End of main wrapper #}
